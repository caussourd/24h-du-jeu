#!/usr/bin/env python

import os
import re
import sqlite3

import requests
from wand.image import Image
from boardgamegeek import BoardGameGeek
from boardgamegeek.exceptions import BoardGameGeekError


DATABASE = 'db/24hDuJeuReferentDb2016Full'
IMG_DIR = os.path.realpath('client/static/img')
PATT = r'_t\.jpg$'
IMG_WIDTH = 223


def show_error(g_id, name):
	print "cannot find image %s (%s)" % (name, g_id)


def download_bgg_img(g_id, name, uri_t):

	bgg = BoardGameGeek()

	# don't download if image already exists
	fn = os.path.join(IMG_DIR, "%s.jpg" % g_id)
	if os.path.exists(fn):
		return


	if uri_t:
		uri = re.sub(PATT, '.jpg', uri_t)
	else:
		# we don't have a bgg thumbnail uri
		# see if we can find image on bgg using id
		# try:
		# 	bgg_id = int(g_id.replace('bgg', ''))
		# except ValueError:
		# 	return show_error(g_id, name)

		try:
			# game = bgg.game(game_id=bgg_id)
			game = bgg.game(game_id=g_id)
		except BoardGameGeekError:
			return show_error(g_id, name)

		uri = game.image


	response = requests.get(uri, stream=True)

	if not response.ok:
		return show_error(g_id, name)

	# resize and save file
	with Image(file=response.raw) as img:
		img.transform(resize=str(IMG_WIDTH))
		img.save(filename=fn)


def run():
	conn = sqlite3.connect(DATABASE)
	cur = conn.cursor()
	q = cur.execute('SELECT ID_BGG, NAME, THUMBNAIL_URI FROM GAME')

	for g_id, name, uri_t in q.fetchall():
		download_bgg_img(g_id, name, uri_t)

	conn.close()


if __name__ == "__main__":
	run()
